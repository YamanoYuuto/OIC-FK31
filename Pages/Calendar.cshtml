@page
@model OIC_FK31.Pages.CalendarModel
@{
}



<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>施設予約システム - Thank you</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.css" rel="stylesheet">
    <link rel="stylesheet" href="~/css/Check.css" />
    
     <style>
        .fc-toolbar {
            font-size: 0.85em;
        }

        .fc-day-sat {
            background-color: #eaf4ff;
        }

        .fc-day-sun {
            background-color: #ffeaea;
        }
    </style>
    
    <script src="jquery.ui.touch.js"></script>
</head>
<body>
    <nav class="navbar navbar-expand-lg">
        <div class="container-fluid navbar-content">
            <!-- ロゴをクリックで TopMenu に移動 -->
            <a asp-page="/TopMenu" id="topback">
                <img src="~/images/Logo.png" alt="施設予約システム" class="img-fluid" />
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>

            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="/Facilities">今すぐ予約</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/ReservationStatus">予約状況確認</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/CancelReservation">予約キャンセル</a>
                    </li>
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                            管理者の方
                        </a>
                        <ul class="dropdown-menu" aria-labelledby="navbarDropdown">
                            <li><a class="dropdown-item" href="/FacilityRegistration">施設の登録と変更</a></li>
                            <li><a class="dropdown-item" href="/UserManagement">使用者情報管理</a></li>
                            <li><a class="dropdown-item" href="/ReportOutput">事務員用レポート出力</a></li>
                        </ul>
                    </li>
                    <li class="nav-item">
                        <a id="logoutButton" class="nav-link" href="Login.html">ログアウト</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

   
    <nav class="navbar navbar-expand-lg" style="background-color: rgb(190, 190, 190);">
        <div class="container-fluid navbar-content">
            <p>
                <strong>
                    施設名     <!-- 施設名を表示する要素 -->
                    <p1 id="facility-name-display">施設名がここに表示されます</p1>
                </strong>
            </p>
        </div>
    </nav>

    <div>
        <p><br /></p>
    </div>

   
    <h2 class="text-center">日時を選択してください</h2>
    <div id="calendar" class="mx-auto" style="max-width: 80%;"></div>

    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var calendarEl = document.getElementById('calendar');
            var calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: 'dayGridMonth',
                headerToolbar: {
                    left: 'prev,next',
                    center: 'title',
                    right: 'monthButton,dayButton'
                },
                customButtons: {
                    monthButton: {
                        text: '月',
                        click: function () {
                            calendar.changeView('dayGridMonth');
                        }
                    },
                    dayButton: {
                        text: '日',
                        click: function () {
                            calendar.changeView('timeGridDay');
                        }
                    }
                },
                locale: 'ja',
                contentHeight: 'auto',
                aspectRatio: 1.5,
                slotDuration: '00:30:00',
                allDaySlot: false,
                selectLongPressDelay: 0,
                dateClick: function (info) {
                    calendar.changeView('timeGridDay', info.dateStr);
                },
                views: {
                    timeGridDay: {
                        slotLabelInterval: '00:30',
                        slotMinTime: '08:00',
                        slotMaxTime: '20:00'
                    }
                },
                selectable: true,
                select: function (info) {
                    // Clear previous selection
                    calendar.getEvents().forEach(event => {
                        if (event.display === 'background') {
                            event.remove();
                        }
                    });
                    selectedTimes = {};

                    const date = info.start.toLocaleDateString("ja-JP", { year: 'numeric', month: 'long', day: 'numeric' });
                    const startTime = info.start.toLocaleTimeString("ja-JP", { hour: '2-digit', minute: '2-digit' });
                    const endTime = info.end.toLocaleTimeString("ja-JP", { hour: '2-digit', minute: '2-digit' });

                    if (startTime === "00:00") return;

                    selectedTimes[date] = [`${startTime} ～ ${endTime}`];

                    let event = {
                        start: info.start,
                        end: info.end,
                        display: 'background',
                        color: 'green'
                    };
                    calendar.addEvent(event);
                }
            });

            calendar.render();

            document.querySelector('h2').insertAdjacentHTML('beforebegin', '<div class="text-center mb-3"><button id="confirmButton" class="btn btn-primary btn-lg">決定</button></div>');

            document.getElementById('confirmButton').addEventListener('click', function () {
                if (Object.keys(selectedTimes).length > 0) {
                    Swal.fire({
                        title: 'これらの時間を選択しますか？',
                        html: Object.entries(selectedTimes).map(([date, times]) => {
                            return `<b>${date}</b>: ${times.join(', ')}`;
                        }).join('<br>'),
                        icon: 'question',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'はい',
                        cancelButtonText: 'いいえ'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            // 選択した時間を保存
                            // sessionStorage.setItem('selectedTimes', JSON.stringify(selectedTimes));
                            // 選択した時間をURLパラメーターに追加
                            const url = new URL(window.location.href);
                            url.pathname = '/Info';
                            url.searchParams.set('DataTime', String(JSON.stringify(selectedTimes)));
                            window.location.href = url;
                        }
                    });
                } else {
                    Swal.fire({
                        title: '時間が選択されていません',
                        text: '少なくとも1つの時間を選択してください。',
                        icon: 'warning',
                        confirmButtonColor: '#3085d6',
                        confirmButtonText: 'OK'
                    });
                }
            });
        });
    </script>



    <!-- Bootstrap JS -->
    <!-- SweetAlert2 JS -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.all.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.getElementById("logoutButton").addEventListener("click", function (event) {
            event.preventDefault(); // デフォルトのリンク動作を防ぐ
            Swal.fire({
                title: "ログアウトしますか？",
                text: "",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#3085d6",
                cancelButtonColor: "#d33",
                confirmButtonText: "はい",
                cancelButtonText: "いいえ",
            }).then((result) => {
                if (result.isConfirmed) {
                    Swal.fire({
                        title: "ログアウトしました",
                        text: "",
                        icon: ""
                    }).then(() => {
                        window.location.href = "/Identity/Account/Logout";
                    });
                }
            });
        });
    </script>

    <script>
        // localStorageから施設名を取得して表示する処理
        window.addEventListener('DOMContentLoaded', () => {
            const facilityName = localStorage.getItem('selectedFacilityName');

            if (facilityName) {
                document.getElementById('facility-name-display').textContent = facilityName;
            }
        });
    </script>
        <script>
                document.addEventListener('DOMContentLoaded', () => {
                    // ページがロードされたときに検索条件を復元する
                    const facilityName = localStorage.getItem('facilityName');
            const genre = localStorage.getItem('genre');
            const location = localStorage.getItem('location');

            if (facilityName) {
                document.querySelector('input[placeholder="施設名"]').value = facilityName;
                    }
            if (genre) {
                document.querySelector('select.form-select:nth-of-type(1)').value = genre;
                    }
            if (location) {
                document.querySelector('select.form-select:nth-of-type(2)').value = location;
                    }

                    // 検索ボタンがクリックされたときに検索条件を保存する
                    document.querySelector('.btn.btn-primary').addEventListener('click', () => {
                        const facilityNameInput = document.querySelector('input[placeholder="施設名"]').value;
            const genreSelect = document.querySelector('select.form-select:nth-of-type(1)').value;
            const locationSelect = document.querySelector('select.form-select:nth-of-type(2)').value;

            localStorage.setItem('facilityName', facilityNameInput);
            localStorage.setItem('genre', genreSelect);
            localStorage.setItem('location', locationSelect);
                    });
                });


                // 施設の名前をlocalStorageに保存する処理
                document.querySelectorAll('.date-selection-button').forEach(button => {
                button.addEventListener('click', function (event) {
                    event.preventDefault(); // リンクのデフォルト動作を防ぐ

                    // data-facility-name属性から施設の名前を取得
                    const facilityName = this.getAttribute('data-facility-name');

                    // localStorageに施設の名前を保存
                    localStorage.setItem('selectedFacilityName', facilityName);

                    // data-url属性からURLを取得し、遷移
                    const url = this.getAttribute('data-url');
                    if (url) {
                        window.location.href = url;
                    } else {
                        console.error('URLが見つかりません。');
                    }
                });
                });
    </script>
</body>
</html>

